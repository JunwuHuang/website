"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8685],{4575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(4848),o=t(8453);const i={},l="\u7ffb\u8f6c\u4e8c\u53c9\u6811",s={type:"mdx",permalink:"/website/leetcode/invert-binary-tree/",source:"@site/src/pages/leetcode/invert-binary-tree/index.md",title:"\u7ffb\u8f6c\u4e8c\u53c9\u6811",description:"2022/10/21",frontMatter:{},unlisted:!1},d={},c=[{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:2},{value:"\u793a\u4f8b\u4e00",id:"\u793a\u4f8b\u4e00",level:3},{value:"\u793a\u4f8b\u4e8c",id:"\u793a\u4f8b\u4e8c",level:3},{value:"\u793a\u4f8b\u4e09",id:"\u793a\u4f8b\u4e09",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:2},{value:"\u9012\u5f52\u6cd5",id:"\u9012\u5f52\u6cd5",level:3}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"\u7ffb\u8f6c\u4e8c\u53c9\u6811",children:"\u7ffb\u8f6c\u4e8c\u53c9\u6811"}),"\n",(0,r.jsx)(n.p,{children:"2022/10/21"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.cn/problems/invert-binary-tree/",children:"https://leetcode.cn/problems/invert-binary-tree/"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\u793a\u4f8b",children:"\u793a\u4f8b"}),"\n",(0,r.jsx)(n.h3,{id:"\u793a\u4f8b\u4e00",children:"\u793a\u4f8b\u4e00"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\u8f93\u5165\uff1aroot = [4,2,7,1,3,6,9]\n\u8f93\u51fa\uff1a[4,7,2,9,6,3,1]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\u793a\u4f8b\u4e8c",children:"\u793a\u4f8b\u4e8c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\u8f93\u5165\uff1aroot = [2,1,3]\n\u8f93\u51fa\uff1a[2,3,1]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\u793a\u4f8b\u4e09",children:"\u793a\u4f8b\u4e09"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\u8f93\u5165\uff1aroot = []\n\u8f93\u51fa\uff1a[]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,r.jsx)(n.h3,{id:"\u9012\u5f52\u6cd5",children:"\u9012\u5f52\u6cd5"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function (root) {\n  const swap = (node) => {\n    const temp = node.left;\n    node.left = node.right;\n    node.right = temp;\n    node.left && swap(node.left);\n    node.right && swap(node.right);\n  };\n  root && swap(root);\n  return root;\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var r=t(6540);const o={},i=r.createContext(o);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);