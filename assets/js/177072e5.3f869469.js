"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9465],{3905:function(e,t,n){n.d(t,{Zo:function(){return f},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},f=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,f=a(e,["components","mdxType","originalType","parentName"]),s=c(n),d=o,g=s["".concat(i,".").concat(d)]||s[d]||p[d]||l;return n?r.createElement(g,u(u({ref:t},f),{},{components:n})):r.createElement(g,u({ref:t},f))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,u=new Array(l);u[0]=s;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:o,u[1]=a;for(var c=2;c<l;c++)u[c]=n[c];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},1762:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return l},metadata:function(){return a},toc:function(){return i}});var r=n(3117),o=(n(7294),n(3905));const l={},u="\u5408\u5e76\u4e8c\u53c9\u6811",a={type:"mdx",permalink:"/website/leetcode/merge-two-binary-trees/",source:"@site/src/pages/leetcode/merge-two-binary-trees/index.md",title:"\u5408\u5e76\u4e8c\u53c9\u6811",description:"2022/10/24",frontMatter:{}},i=[{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:2},{value:"\u793a\u4f8b\u4e00",id:"\u793a\u4f8b\u4e00",level:3},{value:"\u793a\u4f8b\u4e8c",id:"\u793a\u4f8b\u4e8c",level:3},{value:"\u601d\u8003\u8fc7\u7a0b",id:"\u601d\u8003\u8fc7\u7a0b",level:2},{value:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",id:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",level:3},{value:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",id:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",level:3}],c={toc:i};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u5408\u5e76\u4e8c\u53c9\u6811"},"\u5408\u5e76\u4e8c\u53c9\u6811"),(0,o.kt)("p",null,"2022/10/24"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/merge-two-binary-trees/"},"https://leetcode.cn/problems/merge-two-binary-trees/"))),(0,o.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,o.kt)("h3",{id:"\u793a\u4f8b\u4e00"},"\u793a\u4f8b\u4e00"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"\u8f93\u5165\uff1aroot1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n\u8f93\u51fa\uff1a[3,4,5,5,4,null,7]\n")),(0,o.kt)("h3",{id:"\u793a\u4f8b\u4e8c"},"\u793a\u4f8b\u4e8c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"\u8f93\u5165\uff1aroot1 = [1], root2 = [1,2]\n\u8f93\u51fa\uff1a[2,2]\n")),(0,o.kt)("h2",{id:"\u601d\u8003\u8fc7\u7a0b"},"\u601d\u8003\u8fc7\u7a0b"),(0,o.kt)("h3",{id:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {TreeNode}\n */\nvar mergeTrees = function (root1, root2) {\n  if (!root1 || !root2) {\n    return root1 ? root1 : root2;\n  }\n\n  const dfs = (t1, t2) => {\n    if (!t1 || !t2) {\n      return t1 ? t1 : t2;\n    }\n    t1.val += t2.val;\n    t1.left = dfs(t1.left, t2.left);\n    t1.right = dfs(t1.right, t2.right);\n    return t1;\n  };\n\n  return dfs(root1, root2);\n};\n")),(0,o.kt)("h3",{id:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {TreeNode}\n */\nvar mergeTrees = function (root1, root2) {\n  if (!root1 || !root2) {\n    return root1 || root2;\n  }\n\n  const merged = new TreeNode(root1.val + root2.val);\n  const queue = [merged];\n  const queue1 = [root1];\n  const queue2 = [root2];\n  while (queue1.length && queue2.length) {\n    const node = queue.shift();\n    const node1 = queue1.shift();\n    const node2 = queue2.shift();\n\n    const left1 = node1.left;\n    const left2 = node2.left;\n\n    const right1 = node1.right;\n    const right2 = node2.right;\n\n    if (left1 && left2) {\n      const left = new TreeNode(left1.val + left2.val);\n      node.left = left;\n\n      queue.push(left);\n      queue1.push(left1);\n      queue2.push(left2);\n    } else if (left1 || left2) {\n      node.left = left1 || left2;\n    }\n\n    if (right1 && right2) {\n      const right = new TreeNode(right1.val + right2.val);\n      node.right = right;\n\n      queue.push(right);\n      queue1.push(right1);\n      queue2.push(right2);\n    } else if (right1 || right2) {\n      node.right = right1 || right2;\n    }\n  }\n\n  return merged;\n};\n")))}f.isMDXComponent=!0}}]);